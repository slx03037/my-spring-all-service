server:
  port: 8181

#Spring Boot中默认的日志级别是INFO，但是可以自己定制日志级别，如下：
logging:
  level:
    root: debug
    com:
      shenlx:
        xinwen:
          springbootlogback:
            controller: info #上面是将所有的日志的级别都改成了 DEBUG ，Spring Boot还支持 package 级别的日志级别调整，格式 logging.level.com.example.demo=INFO
  file:
    path:  '/logs/logback' #Spring Boot中日志默认是输出到控制台的，但是在生产环境中显示不可行的，因此需要配置日志输出到日志文件中。
           #其中有两个重要配置如下：
                            #1.logging.file.path ：指定日志文件的路径
                            #2. logging.file.name ：日志的文件名，默认为 spring.log
      # 注意：官方文档说这两个属性不能同时配置，否则不生效，因此只需要配置一个即可。
      # 指定输出的文件为当前项目路径的 logs 文件下，默认生成的日志文件为 spring.log ，
    #如何定制日志格式？
  pattern:
    console: '%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n'  #控制台的输出格式
    file: '%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n'   #日志文件的输出格式
    #### 配置编码得含义
    ## %d{HH:mm:ss.SSS}——日志输出时间
    #  %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
    #  %-5level——日志级别，并且使用5个字符靠左对齐
    #  %logger- ——日志输出者的名字
    #  %msg——日志消息
    #  %n——平台的换行符

    ###Spring Boot官方文档指出，根据不同的日志系统，可以按照如下的日志配置文件名就能够被正确加载，如下：
    #1. Logback ：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
    #2. Log4j ：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
    #3. Log4j2 ：log4j2-spring.xml, log4j2.xml
    #4. JDK (Java Util Logging) ：logging.properties

  # config: =classpath:logging-config.xml #如果就不想用Spring Boot推荐的名字，想自己定制也行，只需要在配置文件中指定配置文件名




